open Base
open Stdio

let scheme_translation () =
  let product ls =
    let rec loop ls prod =
      match ls with
      | [] -> prod
      | h::t -> loop t (h * prod)
    in
    loop ls 1;
  in
  let s =
    "73167176531330624919225119674426574742355349194934"
    ^ "96983520312774506326239578318016984801869478851843"
    ^ "85861560789112949495459501737958331952853208805511"
    ^ "12540698747158523863050715693290963295227443043557"
    ^ "66896648950445244523161731856403098711121722383113"
    ^ "62229893423380308135336276614282806444486645238749"
    ^ "30358907296290491560440772390713810515859307960866"
    ^ "70172427121883998797908792274921901699720888093776"
    ^ "65727333001053367881220235421809751254540594752243"
    ^ "52584907711670556013604839586446706324415722155397"
    ^ "53697817977846174064955149290862569321978468622482"
    ^ "83972241375657056057490261407972968652414535100474"
    ^ "82166370484403199890008895243450658541227588666881"
    ^ "16427171479924442928230863465674813919123162824586"
    ^ "17866458359124566529476545682848912883142607690042"
    ^ "24219022671055626321111109370544217506941658960408"
    ^ "07198403850962455444362981230987879927244284909188"
    ^ "84580156166097919133875499200524063689912560717606"
    ^ "05886116467109405077541002256983155200055935729725"
    ^ "71636269561882670428252483600823257530420752963450"
  in
  let char2digit c =
    (Char.to_int c) - 48
  in
  let windows ls n =
    (* emulate srf-1 *)
    let take_right lis k  =
      let rec lp lag lead =
        match lead with
        | [] -> lag
        | _ :: cdr ->
           match lag with
           | _::t -> lp t cdr
           | _ -> failwith "impossible"
      in
      lp lis (List.drop lis k)
    in
    (* emulate srfi-1 *)
    let drop_right lis k =
      let rec recur lag lead =
        match lead with
        | [] -> []
        | _ :: cdr ->
           match lag with
           | h::t -> h :: recur t cdr
           | _ -> failwith "impossible"
      in
      recur lis (List.drop lis k)
    in
    let rec loop ls res =
      match (List.drop ls n) with
      | [] -> (take_right ls n) :: res
      | _ -> loop (drop_right ls 1) ((take_right ls n) :: res)
    in
    loop ls []
  in
  let digits = List.map ~f:char2digit (String.to_list s) in
  let wins = windows digits 13 in
  (* (List.map ~f:product wins) *)
  printf "%d\n"
    (List.fold ~f:max (List.map ~f:product wins) ~init:0)

let rework () =
  let s =
    "73167176531330624919225119674426574742355349194934"
    ^ "96983520312774506326239578318016984801869478851843"
    ^ "85861560789112949495459501737958331952853208805511"
    ^ "12540698747158523863050715693290963295227443043557"
    ^ "66896648950445244523161731856403098711121722383113"
    ^ "62229893423380308135336276614282806444486645238749"
    ^ "30358907296290491560440772390713810515859307960866"
    ^ "70172427121883998797908792274921901699720888093776"
    ^ "65727333001053367881220235421809751254540594752243"
    ^ "52584907711670556013604839586446706324415722155397"
    ^ "53697817977846174064955149290862569321978468622482"
    ^ "83972241375657056057490261407972968652414535100474"
    ^ "82166370484403199890008895243450658541227588666881"
    ^ "16427171479924442928230863465674813919123162824586"
    ^ "17866458359124566529476545682848912883142607690042"
    ^ "24219022671055626321111109370544217506941658960408"
    ^ "07198403850962455444362981230987879927244284909188"
    ^ "84580156166097919133875499200524063689912560717606"
    ^ "05886116467109405077541002256983155200055935729725"
    ^ "71636269561882670428252483600823257530420752963450"
  in
  let char2digit c =
    (Char.to_int c) - 48
  in
  let product str =
    let ls = String.to_list str in
    let rec loop ls prod =
      match ls with
      | [] -> prod
      | h::t -> loop t ((char2digit h) * prod)
    in
    loop ls 1;
  in
  let windows str n =
    let len = String.length(str) in
    let rec loop ls count =
      if count = len - n then ls
      else loop ((String.sub str ~pos:count ~len:n) :: ls) (count + 1)
    in
    loop [] 0
  in
  (* let digits = List.map ~f:char2digit (String.to_list s) in *)
  let wins = windows s 13 in
  (* (List.map ~f:product wins) *)
  printf "%d\n"
    (List.fold ~f:max (List.map ~f:product wins) ~init:0)

let () =
  printf "Scheme translation:\n";
  Time.time scheme_translation;
  printf "Rework:\n";
  Time.time rework


